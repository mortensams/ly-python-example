name: CI/CD Pipeline

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  quality:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        
    - name: Create reports directory
      run: mkdir -p reports
        
    - name: Lint with flake8
      continue-on-error: true
      run: |
        echo "=== Flake8 Linting Report ===" > reports/flake8_report.txt
        echo "Python files analyzed:" >> reports/flake8_report.txt
        find . -name "*.py" | grep -v "venv/" >> reports/flake8_report.txt
        echo "\nDetailed findings:" >> reports/flake8_report.txt
        flake8 . --count --statistics --show-source --max-line-length=100 --format="%(path)s:%(row)d:%(col)d: %(code)s %(text)s" >> reports/flake8_report.txt 2>&1 || true
        cat reports/flake8_report.txt
        
    - name: Static analysis with pylint
      continue-on-error: true
      run: |
        echo "=== Pylint Static Analysis Report ===" > reports/pylint_report.txt
        pylint --rcfile=setup.cfg $(git ls-files '*.py') --msg-template="{path}:{line}: [{msg_id}({symbol}), {obj}] {msg}" >> reports/pylint_report.txt 2>&1 || true
        cat reports/pylint_report.txt

    - name: Upload code quality reports
      uses: actions/upload-artifact@v3
      with:
        name: code-quality-reports
        path: reports/
        retention-days: 14

  build-and-test:
    needs: quality
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
      
    steps:
    - uses: actions/checkout@v3
    
    - name: Build Docker image
      run: docker build -t ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }} .
      
    - name: Start container
      run: |
        docker run -d -p 8000:8000 ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }}
        sleep 10  # Wait for container to start
        
    - name: Run tests with pytest
      run: |
        pip install pytest pytest-cov requests
        pytest tests/ --cov=. --cov-report=xml -v
        
    - name: Upload coverage report
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml

    - name: Generate SBOM
      uses: anchore/sbom-action@v0
      with:
        format: spdx-json
        artifact-name: sbom.spdx.json
        image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }}

    - name: Run Vulnerability Scan
      uses: anchore/scan-action@v3
      id: scan
      with:
        image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }}
        fail-build: false
        severity-cutoff: high

    - name: Upload vulnerability report
      uses: github/codeql-action/upload-sarif@v2
      with:
        sarif_file: ${{ steps.scan.outputs.sarif }}

    - name: Log in to GitHub Container Registry
      uses: docker/login-action@v2
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
        
    - name: Push Docker image
      run: |
        docker push ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }}
        docker tag ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }} ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest
        docker push ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest

  deploy:
    needs: build-and-test
    runs-on: ubuntu-latest
    environment: production
    
    steps:
    - name: Deploy to production
      run: |
        echo "Deployment would happen here"